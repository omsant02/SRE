{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/DEX.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @notice Simple DEX contract that allows users to swap ETH for MyUSD and MyUSD for ETH\n */\ncontract DEX {\n    /* ========== GLOBAL VARIABLES ========== */\n\n    IERC20 token; //instantiates the imported contract\n    uint256 public totalLiquidity;\n    mapping(address => uint256) public liquidity;\n\n    /* ========== EVENTS ========== */\n\n    event Swap(address swapper, address inputToken, uint256 inputAmount, address outputToken, uint256 outputAmount);\n    event PriceUpdated(uint256 price);\n    /**\n     * @notice Emitted when liquidity provided to DEX and mints LPTs.\n     */\n    event LiquidityProvided(address liquidityProvider, uint256 liquidityMinted, uint256 ethInput, uint256 tokensInput);\n\n    /**\n     * @notice Emitted when liquidity removed from DEX and decreases LPT count within DEX.\n     */\n    event LiquidityRemoved(\n        address liquidityRemover,\n        uint256 liquidityWithdrawn,\n        uint256 tokensOutput,\n        uint256 ethOutput\n    );\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(address tokenAddr) {\n        token = IERC20(tokenAddr); //specifies the token address that will hook into the interface and be used through the variable 'token'\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice initializes amount of tokens that will be transferred to the DEX itself from the erc20 contract. Loads contract up with both ETH and MyUSD.\n     * @param tokens amount to be transferred to DEX\n     * @return totalLiquidity is the number of LPTs minting as a result of deposits made to DEX contract\n     * NOTE: since ratio is 1:1, this is fine to initialize the totalLiquidity as equal to eth balance of contract.\n     */\n    function init(uint256 tokens) public payable returns (uint256) {\n        require(totalLiquidity == 0, \"DEX: init - already has liquidity\");\n        totalLiquidity = address(this).balance;\n        liquidity[msg.sender] = totalLiquidity;\n        require(token.transferFrom(msg.sender, address(this), tokens), \"DEX: init - transfer did not transact\");\n        emit PriceUpdated(currentPrice());\n        return totalLiquidity;\n    }\n\n    /**\n     * @notice returns the amount you should receive (yOutput) when given the reserves of both assets in the pool\n     */\n    function price(uint256 xInput, uint256 xReserves, uint256 yReserves) public pure returns (uint256 yOutput) {\n        uint256 numerator = xInput * yReserves;\n        uint256 denominator = (xReserves) + xInput;\n        return (numerator / denominator);\n    }\n\n    /**\n     * @notice returns the current price of ETH in $MyUSD\n     */\n    function currentPrice() public view returns (uint256 _currentPrice) {\n        _currentPrice = price(1 ether, address(this).balance, token.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice returns the amount you need to put in (xInput) when given the amount of yOutput you want along with the reserves of both assets in the pool\n     */\n    function calculateXInput(\n        uint256 yOutput,\n        uint256 xReserves,\n        uint256 yReserves\n    ) public pure returns (uint256 xInput) {\n        uint256 numerator = yOutput * xReserves;\n        uint256 denominator = yReserves - yOutput;\n\n        return (numerator / denominator) + 1;\n    }\n\n    /**\n     * @notice sends Ether to DEX in exchange for $MyUSD\n     */\n    function ethToToken() internal returns (uint256 tokenOutput) {\n        require(msg.value > 0, \"cannot swap 0 ETH\");\n        uint256 ethReserve = address(this).balance - msg.value;\n        uint256 tokenReserve = token.balanceOf(address(this));\n        tokenOutput = price(msg.value, ethReserve, tokenReserve);\n\n        require(token.transfer(msg.sender, tokenOutput), \"ethToToken(): reverted swap.\");\n        emit Swap(msg.sender, address(0), msg.value, address(token), tokenOutput);\n        return tokenOutput;\n    }\n\n    /**\n     * @notice sends $MyUSD tokens to DEX in exchange for Ether\n     */\n    function tokenToEth(uint256 tokenInput) internal returns (uint256 ethOutput) {\n        require(tokenInput > 0, \"cannot swap 0 tokens\");\n        require(token.balanceOf(msg.sender) >= tokenInput, \"insufficient token balance\");\n        require(token.allowance(msg.sender, address(this)) >= tokenInput, \"insufficient allowance\");\n        uint256 tokenReserve = token.balanceOf(address(this));\n        ethOutput = price(tokenInput, tokenReserve, address(this).balance);\n        require(token.transferFrom(msg.sender, address(this), tokenInput), \"tokenToEth(): reverted swap.\");\n        (bool sent, ) = msg.sender.call{ value: ethOutput }(\"\");\n        require(sent, \"tokenToEth: revert in transferring eth to you!\");\n        emit Swap(msg.sender, address(token), tokenInput, address(0), ethOutput);\n        return ethOutput;\n    }\n\n    /**\n     * @notice allows users to swap ETH for $MyUSD or $MyUSD for ETH with a single method\n     */\n    function swap(uint256 inputAmount) public payable returns (uint256 outputAmount) {\n        if (msg.value > 0 && inputAmount == msg.value) {\n            outputAmount = ethToToken();\n        } else {\n            outputAmount = tokenToEth(inputAmount);\n        }\n        emit PriceUpdated(currentPrice());\n    }\n\n    /**\n     * @notice allows deposits of $MyUSD and $ETH to liquidity pool\n     * NOTE: parameter is the msg.value sent with this function call. That amount is used to determine the amount of $MyUSD needed as well and taken from the depositor.\n     * NOTE: user has to make sure to give DEX approval to spend their tokens on their behalf by calling approve function prior to this function call.\n     * NOTE: Equal parts of both assets will be removed from the user's wallet with respect to the price outlined by the AMM.\n     */\n    function deposit() public payable returns (uint256 tokensDeposited) {\n        require(msg.value > 0, \"Must send value when depositing\");\n        uint256 ethReserve = address(this).balance - msg.value;\n        uint256 tokenReserve = token.balanceOf(address(this));\n        uint256 tokenDeposit;\n\n        tokenDeposit = ((msg.value * tokenReserve) / ethReserve) + 1;\n\n        require(token.balanceOf(msg.sender) >= tokenDeposit, \"insufficient token balance\");\n        require(token.allowance(msg.sender, address(this)) >= tokenDeposit, \"insufficient allowance\");\n\n        uint256 liquidityMinted = (msg.value * totalLiquidity) / ethReserve;\n        liquidity[msg.sender] += liquidityMinted;\n        totalLiquidity += liquidityMinted;\n\n        require(token.transferFrom(msg.sender, address(this), tokenDeposit));\n        emit LiquidityProvided(msg.sender, liquidityMinted, msg.value, tokenDeposit);\n        return tokenDeposit;\n    }\n\n    /**\n     * @notice allows withdrawal of $MyUSD and $ETH from liquidity pool\n     * NOTE: with this current code, the msg caller could end up getting very little back if the liquidity is super low in the pool. I guess they could see that with the UI.\n     */\n    function withdraw(uint256 amount) public returns (uint256 ethAmount, uint256 tokenAmount) {\n        require(liquidity[msg.sender] >= amount, \"withdraw: sender does not have enough liquidity to withdraw.\");\n        uint256 ethReserve = address(this).balance;\n        uint256 tokenReserve = token.balanceOf(address(this));\n        uint256 ethWithdrawn;\n\n        ethWithdrawn = (amount * ethReserve) / totalLiquidity;\n\n        tokenAmount = (amount * tokenReserve) / totalLiquidity;\n        liquidity[msg.sender] -= amount;\n        totalLiquidity -= amount;\n        (bool sent, ) = payable(msg.sender).call{ value: ethWithdrawn }(\"\");\n        require(sent, \"withdraw(): revert in transferring eth to you!\");\n        require(token.transfer(msg.sender, tokenAmount));\n        emit LiquidityRemoved(msg.sender, amount, tokenAmount, ethWithdrawn);\n        return (ethWithdrawn, tokenAmount);\n    }\n}\n"
    },
    "contracts/MyUSD.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\nimport \"./MyUSDStaking.sol\";\n\nerror MyUSD__InvalidAmount();\nerror MyUSD__InsufficientBalance();\nerror MyUSD__InsufficientAllowance();\nerror MyUSD__InvalidAddress();\nerror MyUSD__NotAuthorized();\n\ncontract MyUSD is ERC20, ERC20Burnable, Ownable {\n    address public stakingContract;\n    address public engineContract;\n\n    constructor(address _engineContract, address _stakingContract) ERC20(\"MyUSD\", \"MyUSD\") Ownable(msg.sender) {\n        engineContract = _engineContract;\n        stakingContract = _stakingContract;\n    }\n\n    function burnFrom(address account, uint256 amount) public override {\n        if (msg.sender != engineContract) revert MyUSD__NotAuthorized();\n\n        return super.burnFrom(account, amount);\n    }\n\n    function mintTo(address to, uint256 amount) external returns (bool) {\n        // Only the engine contract can mint because MyUSD must always have collateral backing it\n        if (msg.sender != engineContract) revert MyUSD__NotAuthorized();\n\n        if (to == address(0)) {\n            revert MyUSD__InvalidAddress();\n        }\n        if (amount == 0) {\n            revert MyUSD__InvalidAmount();\n        }\n        _mint(to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Overrides the standard balanceOf function to handle virtual balances for staking\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        // For normal accounts, return standard balance\n        if (account != stakingContract) {\n            return super.balanceOf(account);\n        }\n\n        // For the staking contract, return the value of the shares\n        MyUSDStaking staking = MyUSDStaking(stakingContract);\n        return staking.getSharesValue(staking.totalShares());\n    }\n\n    /**\n     * @dev Overrides the standard _update function to handle virtual balances for staking\n     */\n    function _update(address from, address to, uint256 value) internal override {\n        // If staking contract is transferring burn or mint since its balance is virtual\n        if (from == stakingContract) {\n            super._mint(to, value);\n        } else if (to == stakingContract) {\n            super._burn(from, value);\n        } else {\n            super._update(from, to, value);\n        }\n    }\n\n    /**\n     * @dev Overrides the standard totalSupply function to handle virtual balances for staking\n     */\n    function totalSupply() public view override returns (uint256) {\n        MyUSDStaking staking = MyUSDStaking(stakingContract);\n        uint256 stakedTotalSupply = staking.getSharesValue(staking.totalShares());\n        return super.totalSupply() + stakedTotalSupply;\n    }\n}\n"
    },
    "contracts/MyUSDEngine.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./MyUSD.sol\";\nimport \"./Oracle.sol\";\nimport \"./MyUSDStaking.sol\";\n\nerror Engine__InvalidAmount();\nerror Engine__UnsafePositionRatio();\nerror Engine__NotLiquidatable();\nerror Engine__InvalidBorrowRate();\nerror Engine__NotRateController();\nerror Engine__InsufficientCollateral();\nerror Engine__TransferFailed();\n\ncontract MyUSDEngine is Ownable {\n    uint256 private constant COLLATERAL_RATIO = 150; // 150% collateralization required\n    uint256 private constant LIQUIDATOR_REWARD = 10; // 10% reward for liquidators\n    uint256 private constant SECONDS_PER_YEAR = 365 days;\n    uint256 private constant PRECISION = 1e18;\n\n    MyUSD private i_myUSD;\n    Oracle private i_oracle;\n    MyUSDStaking private i_staking;\n    address private i_rateController;\n\n    uint256 public borrowRate; // Annual interest rate for borrowers in basis points (1% = 100)\n\n    // Total debt shares in the pool\n    uint256 public totalDebtShares;\n\n    // Exchange rate between debt shares and MyUSD (1e18 precision)\n    uint256 public debtExchangeRate;\n    uint256 public lastUpdateTime;\n\n    mapping(address => uint256) public s_userCollateral;\n    mapping(address => uint256) public s_userDebtShares;\n\n    event CollateralAdded(address indexed user, uint256 indexed amount, uint256 price);\n    event CollateralWithdrawn(address indexed withdrawer, uint256 indexed amount, uint256 price);\n    event BorrowRateUpdated(uint256 newRate);\n    event DebtSharesMinted(address indexed user, uint256 amount, uint256 shares);\n    event DebtSharesBurned(address indexed user, uint256 amount, uint256 shares);\n    event Liquidation(\n        address indexed user,\n        address indexed liquidator,\n        uint256 amountForLiquidator,\n        uint256 liquidatedUserDebt,\n        uint256 price\n    );\n\n    modifier onlyRateController() {\n        if (msg.sender != i_rateController) revert Engine__NotRateController();\n        _;\n    }\n\n    constructor(\n        address _oracle,\n        address _myUSDAddress,\n        address _stakingAddress,\n        address _rateController\n    ) Ownable(msg.sender) {\n        i_oracle = Oracle(_oracle);\n        i_myUSD = MyUSD(_myUSDAddress);\n        i_staking = MyUSDStaking(_stakingAddress);\n        i_rateController = _rateController;\n        lastUpdateTime = block.timestamp;\n        debtExchangeRate = PRECISION; // 1:1 initially\n    }\n\n    // Checkpoint 2: Depositing Collateral & Understanding Value\n    function addCollateral() public payable {\n        if (msg.value == 0) {\n            revert Engine__InvalidAmount();\n        }\n        s_userCollateral[msg.sender] += msg.value;\n\n        emit CollateralAdded(msg.sender, msg.value, i_oracle.getETHMyUSDPrice());\n    }\n\n    function calculateCollateralValue(address user) public view returns (uint256) {\n        return (s_userCollateral[user] * i_oracle.getETHMyUSDPrice()) / PRECISION;\n    }\n\n    // Checkpoint 3: Interest Calculation System\n    function _getCurrentExchangeRate() internal view returns (uint256) {\n        if (totalDebtShares == 0) {\n            return debtExchangeRate;\n        }\n\n        uint256 timeElapsed = block.timestamp - lastUpdateTime;\n        if (timeElapsed == 0 || borrowRate == 0) return debtExchangeRate;\n        uint256 totalDebtValue = (totalDebtShares * debtExchangeRate) / PRECISION;\n        uint256 interest = (totalDebtValue * borrowRate * timeElapsed) / (SECONDS_PER_YEAR * 10000);\n\n        return debtExchangeRate + (interest * PRECISION) / totalDebtShares;\n    }\n\n    function _accrueInterest() internal {\n        if (totalDebtShares == 0) {\n            lastUpdateTime = block.timestamp;\n            return;\n        }\n\n        debtExchangeRate = _getCurrentExchangeRate();\n        lastUpdateTime = block.timestamp;\n    }\n\n    function _getMyUSDToShares(uint256 amount) internal view returns (uint256) {\n        return (amount * PRECISION) / _getCurrentExchangeRate();\n    }\n\n    // Checkpoint 4: Minting MyUSD & Position Health\n    function getCurrentDebtValue(address user) public view returns (uint256) {\n        if (s_userDebtShares[user] == 0) {\n            return 0;\n        }\n        return (s_userDebtShares[user] * _getCurrentExchangeRate()) / PRECISION;\n    }\n\n    function calculatePositionRatio(address user) public view returns (uint256) {\n        uint256 debtValue = getCurrentDebtValue(user);\n        if (debtValue == 0) {\n            return type(uint256).max;\n        }\n        uint256 collateralValue = calculateCollateralValue(user);\n\n        return (collateralValue * PRECISION) / debtValue;\n    }\n\n    function _validatePosition(address user) internal view {\n        if (!(calculatePositionRatio(user) * 100 >= COLLATERAL_RATIO * PRECISION)) {\n            revert Engine__UnsafePositionRatio();\n        }\n    }\n\n    function mintMyUSD(uint256 mintAmount) public {\n        if (mintAmount == 0) {\n            revert Engine__InvalidAmount();\n        }\n        uint256 shares = _getMyUSDToShares(mintAmount);\n        s_userDebtShares[msg.sender] += shares;\n        totalDebtShares += shares;\n        _validatePosition(msg.sender);\n        i_myUSD.mintTo(msg.sender, mintAmount);\n\n        emit DebtSharesMinted(msg.sender, mintAmount, shares);\n    }\n\n    // Checkpoint 5: Accruing Interest & Managing Borrow Rates\n    function setBorrowRate(uint256 newRate) external onlyRateController {\n        uint256 savingsRate = i_staking.savingsRate();\n\n        if (newRate < savingsRate) {\n            revert Engine__InvalidBorrowRate();\n        }\n\n        _accrueInterest();\n\n        borrowRate = newRate;\n\n        emit BorrowRateUpdated(newRate);\n    }\n\n    // Checkpoint 6: Repaying Debt & Withdrawing Collateral\n    function repayUpTo(uint256 amount) public {\n        uint256 shares = _getMyUSDToShares(amount);\n\n        if (shares > s_userDebtShares[msg.sender]) {\n            shares = s_userDebtShares[msg.sender];\n            amount = getCurrentDebtValue(msg.sender);\n        }\n\n        if (amount == 0 || i_myUSD.balanceOf(msg.sender) < amount) {\n            revert MyUSD__InsufficientBalance();\n        }\n\n        if (i_myUSD.allowance(msg.sender, address(this)) < amount) {\n            revert MyUSD__InsufficientAllowance();\n        }\n\n        s_userDebtShares[msg.sender] -= shares;\n        totalDebtShares -= shares;\n\n        i_myUSD.burnFrom(msg.sender, amount);\n\n        emit DebtSharesBurned(msg.sender, amount, shares);\n    }\n\n    function withdrawCollateral(uint256 amount) external {\n        if (amount == 0) {\n            revert Engine__InvalidAmount();\n        }\n\n        if (s_userCollateral[msg.sender] < amount) {\n            revert Engine__InsufficientCollateral();\n        }\n\n        s_userCollateral[msg.sender] -= amount;\n\n        if (s_userDebtShares[msg.sender] > 0) {\n            _validatePosition(msg.sender);\n        }\n\n        (bool sent, ) = payable(msg.sender).call{ value: amount }(\"\");\n        if (!sent) {\n            revert Engine__TransferFailed();\n        }\n\n        emit CollateralWithdrawn(msg.sender, amount, i_oracle.getETHMyUSDPrice());\n    }\n\n    // Checkpoint 7: Liquidation - Enforcing System Stability\n    function isLiquidatable(address user) public view returns (bool) {\n        if (calculatePositionRatio(user) * 100 < COLLATERAL_RATIO * PRECISION) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function liquidate(address user) external {\n        if (!isLiquidatable(user)) {\n            revert Engine__NotLiquidatable();\n        }\n\n        uint256 userDebtValue = getCurrentDebtValue(user);\n        uint256 userCollateral = s_userCollateral[user];\n        uint256 collateralValue = calculateCollateralValue(user);\n\n        if (i_myUSD.balanceOf(msg.sender) < userDebtValue) {\n            revert MyUSD__InsufficientBalance();\n        }\n\n        if (i_myUSD.allowance(msg.sender, address(this)) < userDebtValue) {\n            revert MyUSD__InsufficientBalance();\n        }\n\n        i_myUSD.burnFrom(msg.sender, userDebtValue);\n\n        totalDebtShares -= s_userDebtShares[user];\n        s_userDebtShares[user] = 0;\n\n        uint256 collateralToL = (userDebtValue * userCollateral) / collateralValue;\n\n        uint256 reward = (collateralToL * LIQUIDATOR_REWARD) / 100;\n\n        uint256 liquidatorAmount = collateralToL + reward;\n\n        liquidatorAmount = liquidatorAmount < userCollateral ? liquidatorAmount : userCollateral;\n\n        s_userCollateral[user] -= liquidatorAmount;\n\n        (bool sent, ) = payable(msg.sender).call{ value: liquidatorAmount }(\"\");\n        if (!sent) {\n            revert Engine__TransferFailed();\n        }\n\n        emit Liquidation(user, msg.sender, liquidatorAmount, userDebtValue, i_oracle.getETHMyUSDPrice());\n    }\n}\n"
    },
    "contracts/MyUSDStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./MyUSD.sol\";\n\ninterface IMyUSDEngine {\n    function borrowRate() external view returns (uint256);\n\n    function setBorrowRate(uint256 newRate) external;\n}\n\nerror Staking__InvalidAmount();\nerror Staking__InsufficientBalance();\nerror Staking__TransferFailed();\nerror Staking__InvalidSavingsRate();\nerror Staking__EngineNotSet();\nerror Staking__NotRateController();\n\ncontract MyUSDStaking is Ownable, ReentrancyGuard {\n    MyUSD public immutable myUSD;\n    IMyUSDEngine public engine;\n    address private i_rateController;\n\n    // Total shares in the pool\n    uint256 public totalShares;\n\n    // Exchange rate between shares and MyUSD (1e18 precision)\n    uint256 public exchangeRate;\n\n    // Last update timestamp\n    uint256 public lastUpdateTime;\n\n    // Interest rate in basis points (1% = 100)\n    uint256 public savingsRate;\n\n    // User's share balance\n    mapping(address => uint256) public userShares;\n\n    // Constants\n    uint256 private constant PRECISION = 1e18;\n    uint256 private constant SECONDS_PER_YEAR = 365 days;\n\n    event Staked(address indexed user, uint256 amount, uint256 shares);\n    event Withdrawn(address indexed user, uint256 amount, uint256 shares);\n    event SavingsRateUpdated(uint256 newRate);\n\n    modifier onlyRateController() {\n        if (msg.sender != i_rateController) revert Staking__NotRateController();\n        _;\n    }\n\n    constructor(address _myUSD, address _engine, address _rateController) Ownable(msg.sender) {\n        myUSD = MyUSD(_myUSD);\n        engine = IMyUSDEngine(_engine);\n        i_rateController = _rateController;\n        exchangeRate = PRECISION; // 1:1 initially\n        lastUpdateTime = block.timestamp;\n    }\n\n    /**\n     * @notice Set the savings rate for the staking contract\n     * @param newRate The new savings rate to set\n     */\n    function setSavingsRate(uint256 newRate) external onlyRateController {\n        if (newRate > engine.borrowRate()) revert Staking__InvalidSavingsRate();\n        _accrueInterest();\n        savingsRate = newRate;\n        emit SavingsRateUpdated(newRate);\n    }\n\n    function _accrueInterest() internal {\n        if (totalShares == 0) {\n            lastUpdateTime = block.timestamp;\n            return;\n        }\n\n        uint256 timeElapsed = block.timestamp - lastUpdateTime;\n        if (timeElapsed == 0) return;\n\n        // Calculate interest based on total shares and exchange rate\n        uint256 totalValue = getSharesValue(totalShares);\n        uint256 interest = (totalValue * savingsRate * timeElapsed) / (SECONDS_PER_YEAR * 10000);\n\n        if (interest > 0) {\n            // Update exchange rate to reflect new value\n            exchangeRate += (interest * PRECISION) / totalShares;\n        }\n\n        lastUpdateTime = block.timestamp;\n    }\n\n    function stake(uint256 amount) external nonReentrant {\n        if (amount == 0) revert Staking__InvalidAmount();\n\n        // Calculate shares based on current exchange rate\n        uint256 shares = (amount * PRECISION) / _getCurrentExchangeRate();\n\n        // Update user's shares and total shares\n        userShares[msg.sender] += shares;\n        totalShares += shares;\n\n        if (myUSD.balanceOf(msg.sender) < amount) {\n            revert MyUSD__InsufficientBalance();\n        }\n\n        if (myUSD.allowance(msg.sender, address(this)) < amount) {\n            revert MyUSD__InsufficientAllowance();\n        }\n\n        // Transfer tokens to contract\n        bool success = myUSD.transferFrom(msg.sender, address(this), amount);\n        if (!success) revert Staking__TransferFailed();\n\n        emit Staked(msg.sender, amount, shares);\n    }\n\n    function withdraw() external nonReentrant {\n        if (address(engine) == address(0)) revert Staking__EngineNotSet();\n\n        uint256 shareAmount = userShares[msg.sender];\n        if (shareAmount == 0) revert Staking__InsufficientBalance();\n\n        // Calculate MyUSD amount based on current exchange rate\n        uint256 amount = getSharesValue(shareAmount);\n\n        // Update user's shares\n        userShares[msg.sender] = 0;\n\n        // Transfer tokens to user\n        bool success = myUSD.transfer(msg.sender, amount);\n        if (!success) revert Staking__TransferFailed();\n        // Now update total shares since MyUSD uses this to determine this contract's token balance\n        totalShares -= shareAmount;\n\n        emit Withdrawn(msg.sender, amount, shareAmount);\n    }\n\n    function getBalance(address user) external view returns (uint256) {\n        if (userShares[user] == 0) return 0;\n\n        return getSharesValue(userShares[user]);\n    }\n\n    function _getCurrentExchangeRate() internal view returns (uint256) {\n        if (totalShares == 0) return exchangeRate;\n\n        uint256 timeElapsed = block.timestamp - lastUpdateTime;\n        if (timeElapsed == 0) return exchangeRate;\n\n        uint256 totalValue = (totalShares * exchangeRate) / PRECISION;\n        uint256 interest = (totalValue * savingsRate * timeElapsed) / (SECONDS_PER_YEAR * 10000);\n\n        if (interest == 0) return exchangeRate;\n\n        return exchangeRate + ((interest * PRECISION) / totalShares);\n    }\n\n    function getSharesValue(uint256 shares) public view returns (uint256) {\n        return (shares * _getCurrentExchangeRate()) / PRECISION;\n    }\n}\n"
    },
    "contracts/Oracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./DEX.sol\";\n\ncontract Oracle {\n    /* ========== STATE VARIABLES ========== */\n\n    DEX public dexAddress;\n    uint256 public defaultPrice;\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(address _dexAddress, uint256 _defaultPrice) {\n        dexAddress = DEX(_dexAddress);\n        defaultPrice = _defaultPrice;\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    function getETHMyUSDPrice() public view returns (uint256) {\n        // Oracle just returns price from DEX unless no liquidity is available\n        uint256 _price = dexAddress.currentPrice();\n        if (_price == 0) {\n            _price = defaultPrice;\n        }\n        return _price;\n    }\n\n    function getETHUSDPrice() public view returns (uint256) {\n        return defaultPrice;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}