{
  "address": "0xd134713d20BdE17E457dAa385525C26f9cAd989A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_myUSD",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_engine",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rateController",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "MyUSD__InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MyUSD__InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Staking__EngineNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Staking__InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Staking__InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Staking__InvalidSavingsRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Staking__NotRateController",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Staking__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "SavingsRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "engine",
      "outputs": [
        {
          "internalType": "contract IMyUSDEngine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "getSharesValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myUSD",
      "outputs": [
        {
          "internalType": "contract MyUSD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "savingsRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "setSavingsRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x92da0e283d7a2611d034d8d74e5ff8eaa4353d4c6747ca800f6bbbe60e51bd46",
  "receipt": {
    "to": null,
    "from": "0xfD6645Ed87321234d5fA4fd5c4146C9b0A07F6Ec",
    "contractAddress": "0xd134713d20BdE17E457dAa385525C26f9cAd989A",
    "transactionIndex": 94,
    "gasUsed": "848157",
    "logsBloom": "0x
    "blockHash": "0x516cec0d8e67fa5cae0572cef00552cc3bea5a33204d29093a664ca37a213239",
    "transactionHash": "0x92da0e283d7a2611d034d8d74e5ff8eaa4353d4c6747ca800f6bbbe60e51bd46",
    "logs": [
      {
        "transactionIndex": 94,
        "blockNumber": 9183078,
        "transactionHash": "0x92da0e283d7a2611d034d8d74e5ff8eaa4353d4c6747ca800f6bbbe60e51bd46",
        "address": "0xd134713d20BdE17E457dAa385525C26f9cAd989A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fd6645ed87321234d5fa4fd5c4146c9b0a07f6ec"
        ],
        "data": "0x",
        "logIndex": 119,
        "blockHash": "0x516cec0d8e67fa5cae0572cef00552cc3bea5a33204d29093a664ca37a213239"
      }
    ],
    "blockNumber": 9183078,
    "cumulativeGasUsed": "22642460",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xda3e2b476CBEb199EC85d78647885B3CD201598f",
    "0xC31691a8e2237A62b5F15a78d83b98922A0fb319",
    "0x237DDC9789940fd98ea6dAb22C4555dE633c3b03"
  ],
  "numDeployments": 1,
  "solcInputHash": "cf6d543375b20e156d72e464c123e3d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_myUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_engine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rateController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MyUSD__InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MyUSD__InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__EngineNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__InvalidSavingsRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__NotRateController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"SavingsRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"engine\",\"outputs\":[{\"internalType\":\"contract IMyUSDEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"getSharesValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myUSD\",\"outputs\":[{\"internalType\":\"contract MyUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"savingsRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setSavingsRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setSavingsRate(uint256)\":{\"params\":{\"newRate\":\"The new savings rate to set\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setSavingsRate(uint256)\":{\"notice\":\"Set the savings rate for the staking contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MyUSDStaking.sol\":\"MyUSDStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/MyUSD.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\nimport \\\"./MyUSDStaking.sol\\\";\\n\\nerror MyUSD__InvalidAmount();\\nerror MyUSD__InsufficientBalance();\\nerror MyUSD__InsufficientAllowance();\\nerror MyUSD__InvalidAddress();\\nerror MyUSD__NotAuthorized();\\n\\ncontract MyUSD is ERC20, ERC20Burnable, Ownable {\\n    address public stakingContract;\\n    address public engineContract;\\n\\n    constructor(address _engineContract, address _stakingContract) ERC20(\\\"MyUSD\\\", \\\"MyUSD\\\") Ownable(msg.sender) {\\n        engineContract = _engineContract;\\n        stakingContract = _stakingContract;\\n    }\\n\\n    function burnFrom(address account, uint256 amount) public override {\\n        if (msg.sender != engineContract) revert MyUSD__NotAuthorized();\\n\\n        return super.burnFrom(account, amount);\\n    }\\n\\n    function mintTo(address to, uint256 amount) external returns (bool) {\\n        // Only the engine contract can mint because MyUSD must always have collateral backing it\\n        if (msg.sender != engineContract) revert MyUSD__NotAuthorized();\\n\\n        if (to == address(0)) {\\n            revert MyUSD__InvalidAddress();\\n        }\\n        if (amount == 0) {\\n            revert MyUSD__InvalidAmount();\\n        }\\n        _mint(to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Overrides the standard balanceOf function to handle virtual balances for staking\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        // For normal accounts, return standard balance\\n        if (account != stakingContract) {\\n            return super.balanceOf(account);\\n        }\\n\\n        // For the staking contract, return the value of the shares\\n        MyUSDStaking staking = MyUSDStaking(stakingContract);\\n        return staking.getSharesValue(staking.totalShares());\\n    }\\n\\n    /**\\n     * @dev Overrides the standard _update function to handle virtual balances for staking\\n     */\\n    function _update(address from, address to, uint256 value) internal override {\\n        // If staking contract is transferring burn or mint since its balance is virtual\\n        if (from == stakingContract) {\\n            super._mint(to, value);\\n        } else if (to == stakingContract) {\\n            super._burn(from, value);\\n        } else {\\n            super._update(from, to, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overrides the standard totalSupply function to handle virtual balances for staking\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        MyUSDStaking staking = MyUSDStaking(stakingContract);\\n        uint256 stakedTotalSupply = staking.getSharesValue(staking.totalShares());\\n        return super.totalSupply() + stakedTotalSupply;\\n    }\\n}\\n\",\"keccak256\":\"0x7d7bec727b0d0817f8796da88b1fd1d4f035a8a727304fd809aef128d6bf1146\",\"license\":\"UNLICENSED\"},\"contracts/MyUSDStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./MyUSD.sol\\\";\\n\\ninterface IMyUSDEngine {\\n    function borrowRate() external view returns (uint256);\\n\\n    function setBorrowRate(uint256 newRate) external;\\n}\\n\\nerror Staking__InvalidAmount();\\nerror Staking__InsufficientBalance();\\nerror Staking__TransferFailed();\\nerror Staking__InvalidSavingsRate();\\nerror Staking__EngineNotSet();\\nerror Staking__NotRateController();\\n\\ncontract MyUSDStaking is Ownable, ReentrancyGuard {\\n    MyUSD public immutable myUSD;\\n    IMyUSDEngine public engine;\\n    address private i_rateController;\\n\\n    // Total shares in the pool\\n    uint256 public totalShares;\\n\\n    // Exchange rate between shares and MyUSD (1e18 precision)\\n    uint256 public exchangeRate;\\n\\n    // Last update timestamp\\n    uint256 public lastUpdateTime;\\n\\n    // Interest rate in basis points (1% = 100)\\n    uint256 public savingsRate;\\n\\n    // User's share balance\\n    mapping(address => uint256) public userShares;\\n\\n    // Constants\\n    uint256 private constant PRECISION = 1e18;\\n    uint256 private constant SECONDS_PER_YEAR = 365 days;\\n\\n    event Staked(address indexed user, uint256 amount, uint256 shares);\\n    event Withdrawn(address indexed user, uint256 amount, uint256 shares);\\n    event SavingsRateUpdated(uint256 newRate);\\n\\n    modifier onlyRateController() {\\n        if (msg.sender != i_rateController) revert Staking__NotRateController();\\n        _;\\n    }\\n\\n    constructor(address _myUSD, address _engine, address _rateController) Ownable(msg.sender) {\\n        myUSD = MyUSD(_myUSD);\\n        engine = IMyUSDEngine(_engine);\\n        i_rateController = _rateController;\\n        exchangeRate = PRECISION; // 1:1 initially\\n        lastUpdateTime = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Set the savings rate for the staking contract\\n     * @param newRate The new savings rate to set\\n     */\\n    function setSavingsRate(uint256 newRate) external onlyRateController {\\n        if (newRate > engine.borrowRate()) revert Staking__InvalidSavingsRate();\\n        _accrueInterest();\\n        savingsRate = newRate;\\n        emit SavingsRateUpdated(newRate);\\n    }\\n\\n    function _accrueInterest() internal {\\n        if (totalShares == 0) {\\n            lastUpdateTime = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 timeElapsed = block.timestamp - lastUpdateTime;\\n        if (timeElapsed == 0) return;\\n\\n        // Calculate interest based on total shares and exchange rate\\n        uint256 totalValue = getSharesValue(totalShares);\\n        uint256 interest = (totalValue * savingsRate * timeElapsed) / (SECONDS_PER_YEAR * 10000);\\n\\n        if (interest > 0) {\\n            // Update exchange rate to reflect new value\\n            exchangeRate += (interest * PRECISION) / totalShares;\\n        }\\n\\n        lastUpdateTime = block.timestamp;\\n    }\\n\\n    function stake(uint256 amount) external nonReentrant {\\n        if (amount == 0) revert Staking__InvalidAmount();\\n\\n        // Calculate shares based on current exchange rate\\n        uint256 shares = (amount * PRECISION) / _getCurrentExchangeRate();\\n\\n        // Update user's shares and total shares\\n        userShares[msg.sender] += shares;\\n        totalShares += shares;\\n\\n        if (myUSD.balanceOf(msg.sender) < amount) {\\n            revert MyUSD__InsufficientBalance();\\n        }\\n\\n        if (myUSD.allowance(msg.sender, address(this)) < amount) {\\n            revert MyUSD__InsufficientAllowance();\\n        }\\n\\n        // Transfer tokens to contract\\n        bool success = myUSD.transferFrom(msg.sender, address(this), amount);\\n        if (!success) revert Staking__TransferFailed();\\n\\n        emit Staked(msg.sender, amount, shares);\\n    }\\n\\n    function withdraw() external nonReentrant {\\n        if (address(engine) == address(0)) revert Staking__EngineNotSet();\\n\\n        uint256 shareAmount = userShares[msg.sender];\\n        if (shareAmount == 0) revert Staking__InsufficientBalance();\\n\\n        // Calculate MyUSD amount based on current exchange rate\\n        uint256 amount = getSharesValue(shareAmount);\\n\\n        // Update user's shares\\n        userShares[msg.sender] = 0;\\n\\n        // Transfer tokens to user\\n        bool success = myUSD.transfer(msg.sender, amount);\\n        if (!success) revert Staking__TransferFailed();\\n        // Now update total shares since MyUSD uses this to determine this contract's token balance\\n        totalShares -= shareAmount;\\n\\n        emit Withdrawn(msg.sender, amount, shareAmount);\\n    }\\n\\n    function getBalance(address user) external view returns (uint256) {\\n        if (userShares[user] == 0) return 0;\\n\\n        return getSharesValue(userShares[user]);\\n    }\\n\\n    function _getCurrentExchangeRate() internal view returns (uint256) {\\n        if (totalShares == 0) return exchangeRate;\\n\\n        uint256 timeElapsed = block.timestamp - lastUpdateTime;\\n        if (timeElapsed == 0) return exchangeRate;\\n\\n        uint256 totalValue = (totalShares * exchangeRate) / PRECISION;\\n        uint256 interest = (totalValue * savingsRate * timeElapsed) / (SECONDS_PER_YEAR * 10000);\\n\\n        if (interest == 0) return exchangeRate;\\n\\n        return exchangeRate + ((interest * PRECISION) / totalShares);\\n    }\\n\\n    function getSharesValue(uint256 shares) public view returns (uint256) {\\n        return (shares * _getCurrentExchangeRate()) / PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0x2d37e04604d48cead367470a73b305bcca1f44a5688a2c5235274016417d24f5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610d68380380610d6883398101604081905261002f91610115565b338061005557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61005e816100a9565b50600180556001600160a01b03928316608052600280549284166001600160a01b031993841617905560038054919093169116179055670de0b6b3a764000060055542600655610158565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461011057600080fd5b919050565b60008060006060848603121561012a57600080fd5b610133846100f9565b9250610141602085016100f9565b915061014f604085016100f9565b90509250925092565b608051610bd961018f60003960008181610141015281816103d1015281816105780152818161062701526106dd0152610bd96000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063de69b3aa11610066578063de69b3aa146101cc578063dea0e746146101ec578063f2fde38b146101ff578063f8b2cb4f1461021257600080fd5b80638da5cb5b1461018c578063a694fc3a1461019d578063c8f33c91146101b0578063c9d4623f146101b957600080fd5b80633ccfd60b116100d35780633ccfd60b146101345780634bad79db1461013c5780636ecd067f1461017b578063715018a61461018457600080fd5b80633a98ef39146100fa5780633ba0b9a9146101165780633be221491461011f575b600080fd5b61010360045481565b6040519081526020015b60405180910390f35b61010360055481565b61013261012d366004610aaa565b610225565b005b61013261032a565b6101637f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161010d565b61010360075481565b6101326104be565b6000546001600160a01b0316610163565b6101326101ab366004610aaa565b6104d0565b61010360065481565b600254610163906001600160a01b031681565b6101036101da366004610ac3565b60086020526000908152604090205481565b6101036101fa366004610aaa565b6107bb565b61013261020d366004610ac3565b6107e8565b610103610220366004610ac3565b610828565b6003546001600160a01b0316331461025057604051632b44bc2760e11b815260040160405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663c914b4376040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c79190610af3565b8111156102e75760405163b524638760e01b815260040160405180910390fd5b6102ef610871565b60078190556040518181527ff222b6a64bddc90734fc07c74ce3da9eab8f251d9a05651db6b196406f7d19e49060200160405180910390a150565b610332610929565b6002546001600160a01b031661035b57604051630811799b60e31b815260040160405180910390fd5b336000908152600860205260408120549081900361038c57604051630f36979d60e01b815260040160405180910390fd5b6000610397826107bb565b336000818152600860205260408082208290555163a9059cbb60e01b81526004810192909252602482018390529192506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af115801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043e9190610b0c565b90508061045e5760405163eb4c684760e01b815260040160405180910390fd5b82600460008282546104709190610b44565b9091555050604080518381526020810185905233917f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6910160405180910390a25050506104bc60018055565b565b6104c6610953565b6104bc6000610980565b6104d8610929565b806000036104f957604051636fe0fba360e11b815260040160405180910390fd5b60006105036109d0565b610515670de0b6b3a764000084610b57565b61051f9190610b6e565b33600090815260086020526040812080549293508392909190610543908490610b90565b92505081905550806004600082825461055c9190610b90565b90915550506040516370a0823160e01b815233600482015282907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156105c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105eb9190610af3565b101561060a576040516325154c9560e21b815260040160405180910390fd5b604051636eb1769f60e11b815233600482015230602482015282907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dd62ed3e90604401602060405180830381865afa158015610676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069a9190610af3565b10156106b8576040516221fc5760e71b815260040160405180910390fd5b6040516323b872dd60e01b8152336004820152306024820152604481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af115801561072e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107529190610b0c565b9050806107725760405163eb4c684760e01b815260040160405180910390fd5b604080518481526020810184905233917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a250506107b860018055565b50565b6000670de0b6b3a76400006107ce6109d0565b6107d89084610b57565b6107e29190610b6e565b92915050565b6107f0610953565b6001600160a01b03811661081f57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6107b881610980565b6001600160a01b038116600090815260086020526040812054810361084f57506000919050565b6001600160a01b0382166000908152600860205260409020546107e2906107bb565b6004546000036108815742600655565b6000600654426108919190610b44565b90508060000361089e5750565b60006108ab6004546107bb565b905060006108bf6301e13380612710610b57565b83600754846108ce9190610b57565b6108d89190610b57565b6108e29190610b6e565b90508015610920576004546108ff670de0b6b3a764000083610b57565b6109099190610b6e565b6005600082825461091a9190610b90565b90915550505b50504260065550565b60026001540361094c57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6000546001600160a01b031633146104bc5760405163118cdaa760e01b8152336004820152602401610816565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006004546000036109e3575060055490565b6000600654426109f39190610b44565b905080600003610a0557505060055490565b6000670de0b6b3a7640000600554600454610a209190610b57565b610a2a9190610b6e565b90506000610a3e6301e13380612710610b57565b8360075484610a4d9190610b57565b610a579190610b57565b610a619190610b6e565b905080600003610a7657600554935050505090565b600454610a8b670de0b6b3a764000083610b57565b610a959190610b6e565b600554610aa29190610b90565b935050505090565b600060208284031215610abc57600080fd5b5035919050565b600060208284031215610ad557600080fd5b81356001600160a01b0381168114610aec57600080fd5b9392505050565b600060208284031215610b0557600080fd5b5051919050565b600060208284031215610b1e57600080fd5b81518015158114610aec57600080fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156107e2576107e2610b2e565b80820281158282048414176107e2576107e2610b2e565b600082610b8b57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156107e2576107e2610b2e56fea2646970667358221220a9f953d214528b053f639f57fb01e73eef6e1e5189ec17298f8b199cc2cb304264736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063de69b3aa11610066578063de69b3aa146101cc578063dea0e746146101ec578063f2fde38b146101ff578063f8b2cb4f1461021257600080fd5b80638da5cb5b1461018c578063a694fc3a1461019d578063c8f33c91146101b0578063c9d4623f146101b957600080fd5b80633ccfd60b116100d35780633ccfd60b146101345780634bad79db1461013c5780636ecd067f1461017b578063715018a61461018457600080fd5b80633a98ef39146100fa5780633ba0b9a9146101165780633be221491461011f575b600080fd5b61010360045481565b6040519081526020015b60405180910390f35b61010360055481565b61013261012d366004610aaa565b610225565b005b61013261032a565b6101637f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161010d565b61010360075481565b6101326104be565b6000546001600160a01b0316610163565b6101326101ab366004610aaa565b6104d0565b61010360065481565b600254610163906001600160a01b031681565b6101036101da366004610ac3565b60086020526000908152604090205481565b6101036101fa366004610aaa565b6107bb565b61013261020d366004610ac3565b6107e8565b610103610220366004610ac3565b610828565b6003546001600160a01b0316331461025057604051632b44bc2760e11b815260040160405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663c914b4376040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c79190610af3565b8111156102e75760405163b524638760e01b815260040160405180910390fd5b6102ef610871565b60078190556040518181527ff222b6a64bddc90734fc07c74ce3da9eab8f251d9a05651db6b196406f7d19e49060200160405180910390a150565b610332610929565b6002546001600160a01b031661035b57604051630811799b60e31b815260040160405180910390fd5b336000908152600860205260408120549081900361038c57604051630f36979d60e01b815260040160405180910390fd5b6000610397826107bb565b336000818152600860205260408082208290555163a9059cbb60e01b81526004810192909252602482018390529192506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af115801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043e9190610b0c565b90508061045e5760405163eb4c684760e01b815260040160405180910390fd5b82600460008282546104709190610b44565b9091555050604080518381526020810185905233917f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6910160405180910390a25050506104bc60018055565b565b6104c6610953565b6104bc6000610980565b6104d8610929565b806000036104f957604051636fe0fba360e11b815260040160405180910390fd5b60006105036109d0565b610515670de0b6b3a764000084610b57565b61051f9190610b6e565b33600090815260086020526040812080549293508392909190610543908490610b90565b92505081905550806004600082825461055c9190610b90565b90915550506040516370a0823160e01b815233600482015282907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156105c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105eb9190610af3565b101561060a576040516325154c9560e21b815260040160405180910390fd5b604051636eb1769f60e11b815233600482015230602482015282907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dd62ed3e90604401602060405180830381865afa158015610676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069a9190610af3565b10156106b8576040516221fc5760e71b815260040160405180910390fd5b6040516323b872dd60e01b8152336004820152306024820152604481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af115801561072e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107529190610b0c565b9050806107725760405163eb4c684760e01b815260040160405180910390fd5b604080518481526020810184905233917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a250506107b860018055565b50565b6000670de0b6b3a76400006107ce6109d0565b6107d89084610b57565b6107e29190610b6e565b92915050565b6107f0610953565b6001600160a01b03811661081f57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6107b881610980565b6001600160a01b038116600090815260086020526040812054810361084f57506000919050565b6001600160a01b0382166000908152600860205260409020546107e2906107bb565b6004546000036108815742600655565b6000600654426108919190610b44565b90508060000361089e5750565b60006108ab6004546107bb565b905060006108bf6301e13380612710610b57565b83600754846108ce9190610b57565b6108d89190610b57565b6108e29190610b6e565b90508015610920576004546108ff670de0b6b3a764000083610b57565b6109099190610b6e565b6005600082825461091a9190610b90565b90915550505b50504260065550565b60026001540361094c57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6000546001600160a01b031633146104bc5760405163118cdaa760e01b8152336004820152602401610816565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006004546000036109e3575060055490565b6000600654426109f39190610b44565b905080600003610a0557505060055490565b6000670de0b6b3a7640000600554600454610a209190610b57565b610a2a9190610b6e565b90506000610a3e6301e13380612710610b57565b8360075484610a4d9190610b57565b610a579190610b57565b610a619190610b6e565b905080600003610a7657600554935050505090565b600454610a8b670de0b6b3a764000083610b57565b610a959190610b6e565b600554610aa29190610b90565b935050505090565b600060208284031215610abc57600080fd5b5035919050565b600060208284031215610ad557600080fd5b81356001600160a01b0381168114610aec57600080fd5b9392505050565b600060208284031215610b0557600080fd5b5051919050565b600060208284031215610b1e57600080fd5b81518015158114610aec57600080fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156107e2576107e2610b2e565b80820281158282048414176107e2576107e2610b2e565b600082610b8b57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156107e2576107e2610b2e56fea2646970667358221220a9f953d214528b053f639f57fb01e73eef6e1e5189ec17298f8b199cc2cb304264736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setSavingsRate(uint256)": {
        "params": {
          "newRate": "The new savings rate to set"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setSavingsRate(uint256)": {
        "notice": "Set the savings rate for the staking contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/MyUSDStaking.sol:MyUSDStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 990,
        "contract": "contracts/MyUSDStaking.sol:MyUSDStaking",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2269,
        "contract": "contracts/MyUSDStaking.sol:MyUSDStaking",
        "label": "engine",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IMyUSDEngine)2247"
      },
      {
        "astId": 2271,
        "contract": "contracts/MyUSDStaking.sol:MyUSDStaking",
        "label": "i_rateController",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2273,
        "contract": "contracts/MyUSDStaking.sol:MyUSDStaking",
        "label": "totalShares",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2275,
        "contract": "contracts/MyUSDStaking.sol:MyUSDStaking",
        "label": "exchangeRate",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2277,
        "contract": "contracts/MyUSDStaking.sol:MyUSDStaking",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2279,
        "contract": "contracts/MyUSDStaking.sol:MyUSDStaking",
        "label": "savingsRate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2283,
        "contract": "contracts/MyUSDStaking.sol:MyUSDStaking",
        "label": "userShares",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IMyUSDEngine)2247": {
        "encoding": "inplace",
        "label": "contract IMyUSDEngine",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}